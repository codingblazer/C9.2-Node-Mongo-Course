last time we saw how to create database and we ran insert and find command
but now lets see how to do this from the inside of node app => to do it from inside of node app we will need node native
//to install it on node, do :
//npm install mongodb@2.2.5

//we use mongoclient to access the running database server
//make sure that database server is running => can be running on server or locally ( we saw in last class that to run database server locally do mongod --dbpath ~/location)
//see mongodb-connect.js
// MongoClient.connect takes 2 args - url of the database server => can be web running server or local running server that you want to access/connect => 2nd arg takes a callback which is called on completing the connection
//db.close() close the connection to the server

//In mongo, we dont need to first create database and then use it => we can create it as we connect => in connect url, we gave localhost../TodoApp => if TodoApp is not a database already, we dont need to worry, we can still connect to hypothetical TodoApp db
//after connecting, as we enter any data by insert into this hypo db, this db with name TodoApp will be created and data will be inserted

//TodoApp is the name of the project and it can include many databases/collections
//db.collection to create new db/collection => takes 2 args : collection object and the callback which is called to tell if collection is added successfully or not
//JSON.stringify takes first the db record : .ops means record/document and strigify takes undefined and 2 space separation as args

//if there are some problems, that is because videos are old => refrer to latest code of mongodb native from github

//after adding enteries, run the node app and then you can see them in robo => click right and then refresh to update the changes in database

//lets learn about id property that gets added for every document (record)
//it is not automincrement integer but a random id like hash
//mongo is designed to scale easily => means that we can add more database server at any moment to handle extra load
//But how => if we had normal increment based db like in sql => if we create new server to store new records => we need to know the last increemtned id from other servers and all that stuff
//but here, since id is random, we dont have any relation to other servers. We can just store data in new server instantly, like we store data in files => this is scaling

 //object id : 12 bytes id : first 4 bytes are timestamp
 next 3 bytes : machine identifier => ensures unique id
 next 2 bytes : process id
next 3 bytes :  counter like normal increment databases

//we can also create our own id => give a property in record {name:'sachin', _id:123}  like this and id will be this but we prefer random id
//BUT id must be unique

//we can also override the id creation function of mongodb library => how to do it => in next commit we will learn it by object destrcuturing

//now we will see fetching -> we can insert records from robo directly => right click -> insert document => fill and save
//now lets fetch
//.find() returns all the records with cursor pointing to these => to array converts them into array => after .find() we can use many cursor methods like toarray
//.then() => inside this you will get whatever you have filtered before this => you will get the filtered result as argument as shown

//inside find we can give queries to filter the records we are getting in terms of key value pair
//also if we want to find by id, we cant give normally like _id:'eveerrv45' because id is not a string , it is object => you have to give new ObjectID('vevrv34cew')

//you can visit docs of mongo native API to see all cursor methods

//you can use count using promises
//in robo, expand recursively open all records
//

//lets work with delete now => deleteMany delete all resutls that match the query while deleteOne delete only one - the first matchign one
on deleting you will get lot of logs in result on comamndline => ok:1 means done and n:3 tells that 3 records were deleted

findOneAndDelete function deletes one and return back the deleted document to us => we may need this document (For ex - to show message that "you have deleted todo witht this text and this value")

see mongo db native for update command => use docs.mongodb.com and see update commands like : $set
//update : findOneAndUpdate takes 4 args => 1. filtering 2.the field to update 3. callback optional
