Earlier, we did created a server for static website using express but now we will create server with a mongodb database
Now here, inside mongoose.js we have mongoose object variable => we will export it => when you are exporting it => the mongoose object, along with its state and configuration like .connect, promise are also passed => we don't have to set them again
=> inside mongoose.js we have exported this variables mongoose => mongoose variable which is present in file mongoose.js is exported along with its config
=> Now inside server.js, we need that mongoose object variable with its config set => first take the complete mongoose.js file as object and then find the mongoose variable inside it...we will able to find that variable because that is exported/accesible
=> first require the mongoose.js file and then we have used destructuring on it to get the mongoose object variable from the inside of this file

Similarly we have exported the User and Todo model variable and then accesed them from their file by destructuring
What is destructuring doing => read stackoverflwo favorited question => here what it has doneis ::
var {Todo} = require('./models/todo.js');

would otherwise had been : var todos = require('./models/todo.js'); => var Todo = todos.Todo; => we reduced one line of code => had we been pulling out more than one variable here, it would have saved lot more code

Some Note : the require and export works together => when you require any file => you are actually accessing everything that is added in the module.export of that file.

We will be working with routees: host route =>

routes : Url handlers => routes the URL the client is hitting to respective resources => app.get(/) that we did in express was get route => and url was /about, /, etc.
resources : various type of resources/infos that we can provide to the User like home page data
view : templates to display those resources .hbs templates we created
controller => separated the code that does routing and the code that processes the actual request

 Flow : client make http request => goes to routes => routes send request to appropraite controller =>  controller contact the models which are present along with mongodb that we just learned => the data is read or write from mongodb using models and
 then the data templated are taken by the controller from views and these templated along with data are returned to the client as http response

Before proceeding further let's go back to revise express where we learned how to create server and host our website to return response to clients
=> Now, express is framework which serves lot of uses :
1) Write handlers for requests with different HTTP verbs like GET, POST at different URL paths (routes).
2) Integrate with "view" rendering engines in order to generate responses by inserting data into templates.
3) Set common web application settings like the port to use for connecting, and the location of templates that are used for rendering the response.
4) Add additional request processing "middleware" at any point within the request handling pipeline. developers have created compatible middleware packages to address almost any web development problem - authentication, security ensuring, cookies,  logins, destructuring

  Read this to get the difference between routes and middlewares : http://qnimate.com/express-js-middleware-tutorial/
  Also some extra points :

  normally when people say route, it means "/anything" i.e. some url route
  Also read the answer here : https://stackoverflow.com/questions/35676259/understanding-middleware-and-route-handler-in-express-js

  Ex of route handlers : app.post(), put(), delete(), options(), trace()
  middleware : app.use

  IMP : Whereas route functions end the HTTP request-response cycle by returning some response to the client, middleware functions typically perform some operation on the request or response like authentication/verification and then call the next function in the "stack", which might be more middleware or a route handler.
Also read this : https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction

That's all with the basics and revison

app.post like get, takes 2 args => the url and the callback => /todos url for creating new todo
Now, bodyParser is middleware which is used to take your json and convert it into a object and then putting into response of callback..we will see how

bodyparser.json() returns a function for json to object and we have passd it to the app.use i.e. passed the middleware functions
now lets run the app server and now, let's test it using postman
=> on postman, select Post and url to be localhost:3000/todos and then in body tab, select JSON and give the json which is sent by client containing todo => {	"text" : "this is first todo"} => you will receiv this todo on console because we logged req.body

now, req.body.text contains the text of the todo sent by client to store in database =>
like we were earlier creating models of todos and users, insdie post route handler, we will create object using model of todo but this time we will be using the texxt of todo = text sent by client i.e. req.body.texxt
next, within post habdler, we are saving the above created todo in database as doc => and if successfull returning this doc to client (because it also contains new infio like id of doc) and error otherwise

=> now when you send post req using postman => text from req is taken and model is used to create todo and then todo is saved as a doc in database => you shuold see the sent todo from postman in robo db and then we return user back the added doc => on postman you will see the response as todo doc

https://httpstatuses.com/ for all the http status codes

now we have set up get route for getting a list of all todos..find() method of mongoose helps in achieving that => we could have send the array of todos as it is but we wrapped it inside object for extensibility i.e. this way we can send more info along with array in future without modifying logic on client side

Now we setup route for finding a particular todo => see the get method => whenever we have to take input coming from user => it comes in from of req => req.params contains user data => see it on postman by doing res.send(req.params) and then decide how to decode that infos
to give url including variable like id in this case, we use : before variable => todos/:id

Now we are deploying to heroku => change port variables
//inside package.json, write start script, also tell the node version on which it will run => for this, check your version and put that

Now lets deploy
heroku create
heroku addons:create mongolab:sandbox //this is a heroku addon that helps us in connecting with mongo => we chose sandbox version of it which is free
heroku config //to see database url => change that in mongoose.js file where we will put this inside connecting
do git commit and push
git push heroku master
heroku log shows all the logs which helps in figuring out if any error occurs


How i did it => Refer here : https://geuispuspita.wordpress.com/2014/06/30/how-to-use-mongohq-on-heroku-without-verifying-your-account/
create account on mlab website and then create database there and add new user with some username and password
corresponding to db, you will get url like  mongodb://<user>:<password>@alex.mongohq.com:10007/<database> => copy it and replace <user> and <pass>, <db> in this by their respective credentials
$ heroku config:set MONGOHQ_URL="mongodb://foo:bar@alex.mongohq.com:10007/mymongodb"
you can check if this env var has been set by using heroku configuration
Now use this var in your mongoose.js for connection

Some other changes done :
"main": "server/server.js" done in package.JSON
Make sure that your locl database server is disconnected - VIMP

You were getting this error : in heroku logs => Db.prototype.authenticate method will no longer be available in the next major release 3.x as MongoDB 3.6 will only allow auth against users in the admin db and will no longer allow multiple cred

Now lets create update route =>
Note: inside post route we may make request to delete anything (can have anything inside any route) => we can do anything but as a standard, post route means we will have code inside which will post something

Patch :
_.pick(req.body,['text','completed']); => this picks the mentioned properties from the req.bpdy and stored them in a object on left side

findByIdAndUpdate(id,{$set: body},{new:true}) => 1) since finding by id => give the id
2) we used $set in mongodb also => it will set every property in body object that matches with property of todo to be updated
3) like in mongodb we had return : false => here we have new : false which tells to retuen or not


Now we will learn about the hashing => right now anybody in world if cmoes to know url can modify our database => must be authenticated which is done by using the tokens
when user is created we will also send a hash based token to the user which he will send to us while making any request in his request header. We will then check if user with this token is authorised to access asked route or not and then accrodingly allow it
we will use this for creating hash => npm i crypto-js --save We will use SHA256 hashing for this => hashing converts any string into a fixed length hash

Lets leave password auth away for while and don't see hashing.js right now => let say you can access your todos with url =>/todos/userid/tokenHash => this should make sure that no only authenticated user can access it => We will take user data, store it in todo, and using user id we will create hash token => will ensure that for every userid, we have hash token  which we provided only to user with that id
But SHA algo is same for everyone => user with id 4 can apply SHA for user id to get token corresponding to user id 5 and get all the data of user 5 => security hole
=> We should make token hash from id + some secret key just know to us on server side => anyone can'y get the hash token of user with id 5 because he must know secret to get that token hash => also since we provided this token to user 5, he can still access it

hashing.js shows this 
